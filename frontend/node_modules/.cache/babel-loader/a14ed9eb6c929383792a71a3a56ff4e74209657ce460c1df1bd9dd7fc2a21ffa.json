{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rc_sh\\\\Desktop\\\\Unidad oftalmologica\\\\Clinica_rosmarian_castillo\\\\frontend\\\\src\\\\pages\\\\ListaMedicos.js\",\n  _s = $RefreshSig$();\n// src/pages/ListaMedicos.js\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n\n// Datos estáticos de ejemplo (puedes actualizarlos o usarlos mientras integras la API)\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const medicosData = [{\n  id: 1,\n  nombre: 'Rosmarian Castillo',\n  especialidades: ['Oftalmología Adulto'],\n  centros: ['Consultorio Dra. Rosmarian Castillo', 'Hospital Universitario'],\n  direccion: 'Centro empresarial Qvadra, F5W8+757, Caracas 1071, Miranda, Venezuela'\n}, {\n  id: 2,\n  nombre: 'Carlos González',\n  especialidades: ['Dermatología'],\n  centros: ['Centro de Salud Dermatológico'],\n  direccion: 'Av. La Paz, Caracas 1040, Venezuela'\n}];\nexport const especialidadesData = ['Oftalmología Adulto', 'Dermatología'];\nexport const centrosSaludData = ['Consultorio Dra. Rosmarian Castillo', 'Hospital Universitario', 'Centro de Salud Dermatológico'];\nconst ListaMedicos = () => {\n  _s();\n  const [medicos, setMedicos] = useState([]);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    axios.get('http://localhost:5000/api/medicos').then(response => {\n      const medicosParsed = response.data.map(medico => ({\n        ...medico,\n        // Si las columnas 'especialidades' y 'asignaciones' vienen como JSON strings, se parsean:\n        especialidades: typeof medico.especialidades === 'string' ? JSON.parse(medico.especialidades) : medico.especialidades,\n        asignaciones: typeof medico.asignaciones === 'string' ? JSON.parse(medico.asignaciones) : medico.asignaciones\n      }));\n      setMedicos(medicosParsed);\n    }).catch(err => {\n      console.error(\"Error al obtener médicos:\", err);\n      setError(\"Error al cargar los médicos\");\n    });\n  }, []);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: error\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 21\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Lista de M\\xE9dicos\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: medicos.map(medico => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: medico.nombre\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 13\n        }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 46\n        }, this), \"Especialidades: \", Array.isArray(medico.especialidades) ? medico.especialidades.join(', ') : medico.especialidades]\n      }, medico.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n};\n_s(ListaMedicos, \"nZXHw8nonyVvpQLmO50NiykzA9o=\");\n_c = ListaMedicos;\nexport default ListaMedicos;\nvar _c;\n$RefreshReg$(_c, \"ListaMedicos\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","medicosData","id","nombre","especialidades","centros","direccion","especialidadesData","centrosSaludData","ListaMedicos","_s","medicos","setMedicos","error","setError","get","then","response","medicosParsed","data","map","medico","JSON","parse","asignaciones","catch","err","console","children","fileName","_jsxFileName","lineNumber","columnNumber","Array","isArray","join","_c","$RefreshReg$"],"sources":["C:/Users/rc_sh/Desktop/Unidad oftalmologica/Clinica_rosmarian_castillo/frontend/src/pages/ListaMedicos.js"],"sourcesContent":["// src/pages/ListaMedicos.js\r\nimport React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\n// Datos estáticos de ejemplo (puedes actualizarlos o usarlos mientras integras la API)\r\nexport const medicosData = [\r\n  {\r\n    id: 1,\r\n    nombre: 'Rosmarian Castillo',\r\n    especialidades: ['Oftalmología Adulto'],\r\n    centros: ['Consultorio Dra. Rosmarian Castillo', 'Hospital Universitario'],\r\n    direccion: 'Centro empresarial Qvadra, F5W8+757, Caracas 1071, Miranda, Venezuela'\r\n  },\r\n  {\r\n    id: 2,\r\n    nombre: 'Carlos González',\r\n    especialidades: ['Dermatología'],\r\n    centros: ['Centro de Salud Dermatológico'],\r\n    direccion: 'Av. La Paz, Caracas 1040, Venezuela'\r\n  }\r\n];\r\n\r\nexport const especialidadesData = [\r\n  'Oftalmología Adulto',\r\n  'Dermatología'\r\n];\r\n\r\nexport const centrosSaludData = [\r\n  'Consultorio Dra. Rosmarian Castillo',\r\n  'Hospital Universitario',\r\n  'Centro de Salud Dermatológico'\r\n];\r\n\r\nconst ListaMedicos = () => {\r\n  const [medicos, setMedicos] = useState([]);\r\n  const [error, setError] = useState(null);\r\n\r\n  useEffect(() => {\r\n    axios.get('http://localhost:5000/api/medicos')\r\n      .then(response => {\r\n        const medicosParsed = response.data.map(medico => ({\r\n          ...medico,\r\n          // Si las columnas 'especialidades' y 'asignaciones' vienen como JSON strings, se parsean:\r\n          especialidades: typeof medico.especialidades === 'string' ? JSON.parse(medico.especialidades) : medico.especialidades,\r\n          asignaciones: typeof medico.asignaciones === 'string' ? JSON.parse(medico.asignaciones) : medico.asignaciones\r\n        }));\r\n        setMedicos(medicosParsed);\r\n      })\r\n      .catch(err => {\r\n        console.error(\"Error al obtener médicos:\", err);\r\n        setError(\"Error al cargar los médicos\");\r\n      });\r\n  }, []);\r\n\r\n  if (error) return <div>{error}</div>;\r\n\r\n  return (\r\n    <div>\r\n      <h1>Lista de Médicos</h1>\r\n      <ul>\r\n        {medicos.map((medico) => (\r\n          <li key={medico.id}>\r\n            <strong>{medico.nombre}</strong> <br />\r\n            Especialidades: {Array.isArray(medico.especialidades) ? medico.especialidades.join(', ') : medico.especialidades}\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ListaMedicos;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}