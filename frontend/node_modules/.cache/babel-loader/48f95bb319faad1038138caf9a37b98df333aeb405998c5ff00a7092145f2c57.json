{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rc_sh\\\\Desktop\\\\Unidad oftalmologica\\\\Clinica_rosmarian_castillo\\\\frontend\\\\src\\\\pages\\\\ListaMedicos.js\",\n  _s = $RefreshSig$();\n// src/pages/ListaMedicos.js\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ListaMedicos = () => {\n  _s();\n  const [medicos, setMedicos] = useState([]);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    axios.get('http://localhost:5000/api/medicos').then(response => {\n      // Si en la base de datos almacenas especialidades y asignaciones como JSON,\n      // podrías necesitar parsearlos:\n      const medicosParsed = response.data.map(medico => ({\n        ...medico,\n        // Supongamos que las columnas 'especialidades' y 'asignaciones' están almacenadas como JSON strings:\n        especialidades: typeof medico.especialidades === 'string' ? JSON.parse(medico.especialidades) : medico.especialidades,\n        asignaciones: typeof medico.asignaciones === 'string' ? JSON.parse(medico.asignaciones) : medico.asignaciones\n      }));\n      setMedicos(medicosParsed);\n    }).catch(err => {\n      console.error(\"Error al obtener médicos:\", err);\n      setError(\"Error al cargar los médicos\");\n    });\n  }, []);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: error\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 21\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Lista de M\\xE9dicos\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: medicos.map(medico => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: medico.nombre\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 13\n        }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 46\n        }, this), \"Especialidades: \", Array.isArray(medico.especialidades) ? medico.especialidades.join(', ') : medico.especialidades, \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 127\n        }, this), \"Asignaciones: \", medico.asignaciones ? JSON.stringify(medico.asignaciones) : 'Sin asignaciones']\n      }, medico.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n};\n_s(ListaMedicos, \"nZXHw8nonyVvpQLmO50NiykzA9o=\");\n_c = ListaMedicos;\nexport default ListaMedicos;\nvar _c;\n$RefreshReg$(_c, \"ListaMedicos\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","ListaMedicos","_s","medicos","setMedicos","error","setError","get","then","response","medicosParsed","data","map","medico","especialidades","JSON","parse","asignaciones","catch","err","console","children","fileName","_jsxFileName","lineNumber","columnNumber","nombre","Array","isArray","join","stringify","id","_c","$RefreshReg$"],"sources":["C:/Users/rc_sh/Desktop/Unidad oftalmologica/Clinica_rosmarian_castillo/frontend/src/pages/ListaMedicos.js"],"sourcesContent":["// src/pages/ListaMedicos.js\r\nimport React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst ListaMedicos = () => {\r\n  const [medicos, setMedicos] = useState([]);\r\n  const [error, setError] = useState(null);\r\n\r\n  useEffect(() => {\r\n    axios.get('http://localhost:5000/api/medicos')\r\n      .then(response => {\r\n        // Si en la base de datos almacenas especialidades y asignaciones como JSON,\r\n        // podrías necesitar parsearlos:\r\n        const medicosParsed = response.data.map(medico => ({\r\n          ...medico,\r\n          // Supongamos que las columnas 'especialidades' y 'asignaciones' están almacenadas como JSON strings:\r\n          especialidades: typeof medico.especialidades === 'string' ? JSON.parse(medico.especialidades) : medico.especialidades,\r\n          asignaciones: typeof medico.asignaciones === 'string' ? JSON.parse(medico.asignaciones) : medico.asignaciones\r\n        }));\r\n        setMedicos(medicosParsed);\r\n      })\r\n      .catch(err => {\r\n        console.error(\"Error al obtener médicos:\", err);\r\n        setError(\"Error al cargar los médicos\");\r\n      });\r\n  }, []);\r\n\r\n  if (error) return <div>{error}</div>;\r\n\r\n  return (\r\n    <div>\r\n      <h1>Lista de Médicos</h1>\r\n      <ul>\r\n        {medicos.map((medico) => (\r\n          <li key={medico.id}>\r\n            <strong>{medico.nombre}</strong> <br />\r\n            Especialidades: {Array.isArray(medico.especialidades) ? medico.especialidades.join(', ') : medico.especialidades} <br />\r\n            Asignaciones: {medico.asignaciones ? JSON.stringify(medico.asignaciones) : 'Sin asignaciones'}\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ListaMedicos;\r\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,YAAY,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACzB,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACS,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EAExCC,SAAS,CAAC,MAAM;IACdC,KAAK,CAACS,GAAG,CAAC,mCAAmC,CAAC,CAC3CC,IAAI,CAACC,QAAQ,IAAI;MAChB;MACA;MACA,MAAMC,aAAa,GAAGD,QAAQ,CAACE,IAAI,CAACC,GAAG,CAACC,MAAM,KAAK;QACjD,GAAGA,MAAM;QACT;QACAC,cAAc,EAAE,OAAOD,MAAM,CAACC,cAAc,KAAK,QAAQ,GAAGC,IAAI,CAACC,KAAK,CAACH,MAAM,CAACC,cAAc,CAAC,GAAGD,MAAM,CAACC,cAAc;QACrHG,YAAY,EAAE,OAAOJ,MAAM,CAACI,YAAY,KAAK,QAAQ,GAAGF,IAAI,CAACC,KAAK,CAACH,MAAM,CAACI,YAAY,CAAC,GAAGJ,MAAM,CAACI;MACnG,CAAC,CAAC,CAAC;MACHb,UAAU,CAACM,aAAa,CAAC;IAC3B,CAAC,CAAC,CACDQ,KAAK,CAACC,GAAG,IAAI;MACZC,OAAO,CAACf,KAAK,CAAC,2BAA2B,EAAEc,GAAG,CAAC;MAC/Cb,QAAQ,CAAC,6BAA6B,CAAC;IACzC,CAAC,CAAC;EACN,CAAC,EAAE,EAAE,CAAC;EAEN,IAAID,KAAK,EAAE,oBAAOL,OAAA;IAAAqB,QAAA,EAAMhB;EAAK;IAAAiB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAM,CAAC;EAEpC,oBACEzB,OAAA;IAAAqB,QAAA,gBACErB,OAAA;MAAAqB,QAAA,EAAI;IAAgB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACzBzB,OAAA;MAAAqB,QAAA,EACGlB,OAAO,CAACS,GAAG,CAAEC,MAAM,iBAClBb,OAAA;QAAAqB,QAAA,gBACErB,OAAA;UAAAqB,QAAA,EAASR,MAAM,CAACa;QAAM;UAAAJ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAS,CAAC,KAAC,eAAAzB,OAAA;UAAAsB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,oBACvB,EAACE,KAAK,CAACC,OAAO,CAACf,MAAM,CAACC,cAAc,CAAC,GAAGD,MAAM,CAACC,cAAc,CAACe,IAAI,CAAC,IAAI,CAAC,GAAGhB,MAAM,CAACC,cAAc,EAAC,GAAC,eAAAd,OAAA;UAAAsB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,kBAC1G,EAACZ,MAAM,CAACI,YAAY,GAAGF,IAAI,CAACe,SAAS,CAACjB,MAAM,CAACI,YAAY,CAAC,GAAG,kBAAkB;MAAA,GAHtFJ,MAAM,CAACkB,EAAE;QAAAT,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAId,CACL;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;AAEV,CAAC;AAACvB,EAAA,CAvCID,YAAY;AAAA+B,EAAA,GAAZ/B,YAAY;AAyClB,eAAeA,YAAY;AAAC,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}