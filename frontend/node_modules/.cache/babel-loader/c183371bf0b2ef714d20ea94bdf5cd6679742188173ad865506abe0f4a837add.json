{"ast":null,"code":"// src/pages/ExportarWord.js\nimport PizZip from \"pizzip\";\nimport Docxtemplater from \"docxtemplater\";\nimport { saveAs } from \"file-saver\";\nexport const exportToWord = async (datosInforme, templateFile = \"plantilla.docx\") => {\n  try {\n    const response = await fetch(`/templates/${templateFile}`);\n    const arrayBuffer = await response.arrayBuffer();\n    const zip = new PizZip(arrayBuffer);\n    const doc = new Docxtemplater(zip, {\n      paragraphLoop: true,\n      linebreaks: true\n    });\n    // Renderiza la plantilla con los datos recibidos.\n    doc.render(datosInforme);\n    const out = doc.getZip().generate({\n      type: \"blob\",\n      mimeType: \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\"\n    });\n    // Asigna el nombre de salida según la plantilla utilizada.\n    let outputFileName = \"\";\n    if (templateFile === \"plantilla.docx\") {\n      outputFileName = \"informe_medico.docx\";\n    } else if (templateFile === \"recipeMedico.docx\") {\n      outputFileName = \"recipeMedico.docx\";\n    } else {\n      outputFileName = templateFile;\n    }\n    saveAs(out, outputFileName);\n  } catch (error) {\n    console.error(\"Error al exportar a Word:\", error);\n    window.alert(\"Error al exportar a Word. Verifique que los marcadores en la plantilla sean correctos.\");\n  }\n};","map":{"version":3,"names":["PizZip","Docxtemplater","saveAs","exportToWord","datosInforme","templateFile","response","fetch","arrayBuffer","zip","doc","paragraphLoop","linebreaks","render","out","getZip","generate","type","mimeType","outputFileName","error","console","window","alert"],"sources":["C:/Users/rc_sh/Desktop/Unidad oftalmologica/Clinica_rosmarian_castillo/frontend/src/pages/ExportarWord.js"],"sourcesContent":["// src/pages/ExportarWord.js\r\nimport PizZip from \"pizzip\";\r\nimport Docxtemplater from \"docxtemplater\";\r\nimport { saveAs } from \"file-saver\";\r\n\r\nexport const exportToWord = async (datosInforme, templateFile = \"plantilla.docx\") => {\r\n  try {\r\n    const response = await fetch(`/templates/${templateFile}`);\r\n    const arrayBuffer = await response.arrayBuffer();\r\n    const zip = new PizZip(arrayBuffer);\r\n    const doc = new Docxtemplater(zip, {\r\n      paragraphLoop: true,\r\n      linebreaks: true,\r\n    });\r\n    // Renderiza la plantilla con los datos recibidos.\r\n    doc.render(datosInforme);\r\n    const out = doc.getZip().generate({\r\n      type: \"blob\",\r\n      mimeType: \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\",\r\n    });\r\n    // Asigna el nombre de salida según la plantilla utilizada.\r\n    let outputFileName = \"\";\r\n    if (templateFile === \"plantilla.docx\") {\r\n      outputFileName = \"informe_medico.docx\";\r\n    } else if (templateFile === \"recipeMedico.docx\") {\r\n      outputFileName = \"recipeMedico.docx\";\r\n    } else {\r\n      outputFileName = templateFile;\r\n    }\r\n    saveAs(out, outputFileName);\r\n  } catch (error) {\r\n    console.error(\"Error al exportar a Word:\", error);\r\n    window.alert(\"Error al exportar a Word. Verifique que los marcadores en la plantilla sean correctos.\");\r\n  }\r\n};\r\n"],"mappings":"AAAA;AACA,OAAOA,MAAM,MAAM,QAAQ;AAC3B,OAAOC,aAAa,MAAM,eAAe;AACzC,SAASC,MAAM,QAAQ,YAAY;AAEnC,OAAO,MAAMC,YAAY,GAAG,MAAAA,CAAOC,YAAY,EAAEC,YAAY,GAAG,gBAAgB,KAAK;EACnF,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,cAAcF,YAAY,EAAE,CAAC;IAC1D,MAAMG,WAAW,GAAG,MAAMF,QAAQ,CAACE,WAAW,CAAC,CAAC;IAChD,MAAMC,GAAG,GAAG,IAAIT,MAAM,CAACQ,WAAW,CAAC;IACnC,MAAME,GAAG,GAAG,IAAIT,aAAa,CAACQ,GAAG,EAAE;MACjCE,aAAa,EAAE,IAAI;MACnBC,UAAU,EAAE;IACd,CAAC,CAAC;IACF;IACAF,GAAG,CAACG,MAAM,CAACT,YAAY,CAAC;IACxB,MAAMU,GAAG,GAAGJ,GAAG,CAACK,MAAM,CAAC,CAAC,CAACC,QAAQ,CAAC;MAChCC,IAAI,EAAE,MAAM;MACZC,QAAQ,EAAE;IACZ,CAAC,CAAC;IACF;IACA,IAAIC,cAAc,GAAG,EAAE;IACvB,IAAId,YAAY,KAAK,gBAAgB,EAAE;MACrCc,cAAc,GAAG,qBAAqB;IACxC,CAAC,MAAM,IAAId,YAAY,KAAK,mBAAmB,EAAE;MAC/Cc,cAAc,GAAG,mBAAmB;IACtC,CAAC,MAAM;MACLA,cAAc,GAAGd,YAAY;IAC/B;IACAH,MAAM,CAACY,GAAG,EAAEK,cAAc,CAAC;EAC7B,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;IACjDE,MAAM,CAACC,KAAK,CAAC,wFAAwF,CAAC;EACxG;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}